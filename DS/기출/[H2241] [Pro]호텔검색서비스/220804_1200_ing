#include <vector>
#include <set>
#include <unordered_map>

using namespace std;

//////////////////////////////////////////////////
struct ri
{
	int rlist[5];
	int idx;

	ri() {
		for (int i = 0; i < 5; i++) rlist[i] = -1;
		idx = -1;
	}
};

class hdb {
public:
	unordered_map<int, ri> table[1001];

	void add(int hid, int rid, int data[5]) {
		for (int i = 0; i < 4; i++) table[hid][rid].rlist[i] = data[i];
	}

	void setidx(int hid, int rid, int i) {
		table[hid][rid].idx = i;
	}
};

hdb h;

//////////////////////////////////////////////////
class cal {
public:
	set<int> table[10001];

	bool isavail(int r, int ci, int co) {
		for (int i = ci; i < co; i++) {
			if (table[i].find(r) != table[i].end()) {
				return false;
			}
		}
		return true;
	}

	void reserve(int r, int ci, int co) {
		for (int i = ci; i < co; i++) {
			table[i].insert(r);
		}
	}
};

cal c;

//////////////////////////////////////////////////

struct rdata
{
	int hid; int rid; int pri;

	rdata() : hid(-1), rid(-1), pri(-1) {}

	rdata(int _hid, int _rid, int _pri) {
		hid = _hid; rid = _rid; pri = _pri;
	}

	void init(int _hid, int _rid, int _pri) {
		hid = _hid; rid = _rid; pri = _pri;
	}
};

class pq {
public:
	vector<rdata> table;
	int sz = 0;

	bool cmp(int i1, int i2) {
		if (table[i1].pri == table[i2].pri) {
			return table[i1].rid > table[i2].rid;
		}
		else return table[i1].pri > table[i2].pri;
	}

	void swap(int i1, int i2) {
		auto tmp = table[i1];
		table[i1] = table[i2];
		table[i2] = tmp;

		h.setidx(table[i1].hid, table[i1].rid, i2);
		h.setidx(table[i2].hid, table[i2].rid, i1);
	}

	void hup(int ci) {
		int pi = (ci - 1) / 2;

		while (ci >= 1 && cmp(pi, ci)) {
			swap(ci, pi);
			ci = pi;
			pi = (ci - 1) / 2;
		}
	}

	void hdwn(int pi) {
		int ci = pi * 2 + 1;
		bool pl = false;

		while (ci < sz && !pl) {
			if (ci < sz - 1 && cmp(ci, ci + 1)) {
				ci += 1;
			}

			if (cmp(pi, ci)) pl = true;
			else swap(ci, pi);

			pi = ci;
			ci = pi * 2 + 1;
		}
	}

	void push(int _hid, int _rid, int _pri) {
		table.push_back(rdata(_hid, _rid, _pri));
		h.setidx(_hid, _rid, sz);
		sz++;

		hup(sz - 1);
	}

	rdata pop() {
		rdata rtv = table[0];
		swap(0, sz - 1);
		//h.setidx(rtv.hid, rtv.rid, -1);
		sz--;

		hdwn(0);

		return rtv;
	}

	void inorder(int i) {
		hup(i);
		hdwn(i);
	}

};

pq rdb[11][11][5][5];

//////////////////////////////////////////////////



pq* getrpq(int mRoomInfo[5]) {
	return &rdb[mRoomInfo[0]][mRoomInfo[1]][mRoomInfo[2]][mRoomInfo[3]];
}

pq getrpq_(int mFilter[6]) {
	return rdb[mFilter[2]][mFilter[3]][mFilter[4]][mFilter[5]];
}

//////////////////////////////////////////////////

void init(int N, int mRoomCnt[])
{
	//  이 함수는 각 테스트 케이스에서 맨 처음 한 번 호출된다.
	//	호텔의 개수 N 은 최대 1, 000 이다.
	//	mRoomCnt[] 는 각 호텔이 가지고 있는 룸의 개수를 전달하는 배열이다.
	//	mRoomCnt[k] 는 호텔 ID k + 1 인 호텔이 보유하고 있는 룸의 개수 이다. (0 ≤ k ≤ N - 1)

	//	Parameters
	//	N : 호텔의 개수(1 ≤ N ≤ 1, 000)
	//	mRoomCnt : 각 호텔이 보유하고 있는 룸의 개수. 1 이상 100 이하의 값을 가진다.
}

void addRoom(int mHotelID, int mRoomID, int mRoomInfo[])
{
	//	Parameters
	//	mHotelID : 룸을 추가할 호텔의 ID(1 ≤ mHotelID ≤ N)\
	//	mRoomID : 룸 ID(1 ≤ mRoomID ≤ 100, 000)
	//	mRoomInfo : 룸의 정보
	
	//  호텔에 새로운 룸을 추가 한다.
	//	룸을 추가할 호텔의 ID 값은 mHotelID 이다.
	//	추가될 룸의 ID 값은 mRoomID 이다.
	//	mRoomInfo 는 추가할 룸에 대한 정보이다.
	//	mRoomInfo 는 길이가 5인 배열이며, 각 인덱스에는 다음의 값을 포함한다.

	//	[0] : 지역, [1] : 침대 수, [2] : 룸 타입, [3] : 조망 타입, [4] : 가격

	//	각 배열의 값은 본문에 표기한 제약사항을 만족한다.

	//	추가될 룸의 개수는 init() 에서 전달된 룸의 개수를 초과하지 않음이 보장된다.

	h.add(mHotelID, mRoomID, mRoomInfo);

	pq* rq = getrpq(mRoomInfo);

	rq->push(mHotelID, mRoomID, mRoomInfo[4]);
	
}

int findRoom(int mFilter[])
{
	//  룸을 검색하고 예약한다.
	//	mFilter 는 검색 조건을 담고 있는 배열이다.

	//	[0] : 체크인 날짜, [1] : 체크아웃 날짜, [2] : 지역, [3] : 침대 수, [4] : 룸 타입, [5] : 조망 타입
	//	각 배열의 값은 본문에 표기한 제약사항을 만족한다.

	//	체크인 ~ 체크아웃 기간에 이미 예약이 되어 있는 룸은 예약할 수 없다.
	//	단, 체크아웃하는 날짜에, 다른 고객이 체크인 하는 것은 가능하다.

	//	검색 조건에 맞는 룸 중, 가장 가격이 싼 룸을 예약한다.
	//	가격이 같을 경우, 그 중 ID 값이 작은 룸을 선택한다.

	pq rq = getrpq_(mFilter);

	for (int i = 0; i < rq.sz; i++) {
		rdata r = rq.pop();
		if (c.isavail(r.rid, mFilter[0], mFilter[1])) {

			c.reserve(r.rid, mFilter[0], mFilter[1]);

			return r.rid;
		}
	}

	// 룸을 예약

	//	예약한 룸의 ID 값을 반환한다.
	//	예약 가능한 룸이 없다면 - 1을 반환한다.

	return -1;
}

int riseCosts(int mHotelID)
{
	//한 호텔이 보유하고 있는 모든 룸의 가격이 각각 10 % 씩 오른다.
	//	계산시 소수점은 버린다.

	int sum = 0;
	auto tmp = h.table[mHotelID];

	for (auto itr = tmp.begin(); itr != tmp.end(); itr++) {
		auto rq = getrpq(itr->second.rlist);
		rq->table[itr->second.idx].pri *= 1.1;
		sum += rq->table[itr->second.idx].pri;
		rq->inorder(itr->second.idx);
	}

	//	Return
	//	호텔이 보유하고 있는 모든 룸의 가격의 합

	return sum;
}
