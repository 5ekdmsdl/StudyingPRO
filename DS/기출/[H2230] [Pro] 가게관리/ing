#include <cstring>
#include <unordered_map>
#include <queue>

using namespace std;

#define IMSZ 
#define MSZ 10

struct pa {
	int pri;
	int id;

	pa(int _pri, int _id) {
		pri = _pri; id = _id;
	}
};

struct cmp {
	bool operator()(pa a, pa b) {
		return a.pri < b.pri;
	}
};

struct d {

	int product;
	int qual;
	priority_queue<pa, vector<pa>, cmp> pq; // price, id

	d() {
		product = -1; qual = 0;
	}

	void start(int _id, int _pro, int _pri, int _qual) {
		product = _pro;
		qual = _qual;

		for (int i = 0; i < qual; i++) {
			pq.push(pa(_pri, _id));
		}

		return;
	}

};

unordered_map<int, d> db; // mProduct -> data

void init() {
	/*각 테스트 케이스의 처음에 호출된다.

		재고가 없는 상태가 된다.*/

	db.clear();

	return;
}

int buy(int bId, int mProduct, int mPrice, int mQuantity) {
	/*mProduct 상품을 mPrice 가격으로 mQuantity 개 구매한다.구매 ID는 bId이다.

		구매 후에, 가게가 보유 중인 mProduct 상품의 총 개수를 반환한다.



		Parameters

		bId : 구매 ID(1 ≤ bId ≤ 1, 000, 000, 000)

		mProduct : 상품 번호(1 ≤ mProduct ≤ 1, 000, 000, 000)

		mPrice : 구매 가격(1, 000 ≤ mPrice ≤ 300, 000)

		mQuantity : 구매 수량(10 ≤ mQuantity ≤ 100)



		Returns

		mProduct 상품의 재고 수량을 반환한다.*/

	if (db.find(mProduct) == db.end()) {
		db[mProduct].start(bId, mProduct, mPrice, mQuantity);
	}

	return db[mProduct].qual;
}

int cancel(int bId) {
	/*mProduct 상품을 mPrice 가격으로 mQuantity 개 구매한다.구매 ID는 bId이다.

		구매 후에, 가게가 보유 중인 mProduct 상품의 총 개수를 반환한다.



		Parameters

		bId : 구매 ID(1 ≤ bId ≤ 1, 000, 000, 000)

		mProduct : 상품 번호(1 ≤ mProduct ≤ 1, 000, 000, 000)

		mPrice : 구매 가격(1, 000 ≤ mPrice ≤ 300, 000)

		mQuantity : 구매 수량(10 ≤ mQuantity ≤ 100)



		Returns

		mProduct 상품의 재고 수량을 반환한다.*/


	return 0;
}

int sell(int sId, int mProduct, int mPrice, int mQuantity) {
	/*mProduct 상품을 mPrice 가격으로 mQuantity 개 구매한다.구매 ID는 bId이다.

		구매 후에, 가게가 보유 중인 mProduct 상품의 총 개수를 반환한다.



		Parameters

		bId : 구매 ID(1 ≤ bId ≤ 1, 000, 000, 000)

		mProduct : 상품 번호(1 ≤ mProduct ≤ 1, 000, 000, 000)

		mPrice : 구매 가격(1, 000 ≤ mPrice ≤ 300, 000)

		mQuantity : 구매 수량(10 ≤ mQuantity ≤ 100)



		Returns

		mProduct 상품의 재고 수량을 반환한다.*/

	return 0;
}

int refund(int sId) {
	/*mProduct 상품을 mPrice 가격으로 mQuantity 개 구매한다.구매 ID는 bId이다.

		구매 후에, 가게가 보유 중인 mProduct 상품의 총 개수를 반환한다.



		Parameters

		bId : 구매 ID(1 ≤ bId ≤ 1, 000, 000, 000)

		mProduct : 상품 번호(1 ≤ mProduct ≤ 1, 000, 000, 000)

		mPrice : 구매 가격(1, 000 ≤ mPrice ≤ 300, 000)

		mQuantity : 구매 수량(10 ≤ mQuantity ≤ 100)



		Returns

		mProduct 상품의 재고 수량을 반환한다.*/


	return 0;
}
