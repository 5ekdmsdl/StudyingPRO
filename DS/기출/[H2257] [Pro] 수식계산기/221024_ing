#include <vector>
#include <unordered_map>
#define MAX_LEN 200
#define pii pair<int, int>

using namespace std;

vector<char> snum, sfig;
string midmap[5000];              // mid -> expr
unordered_map<int, vector<int>> db[4];  // num -> type -> mid

int points[3][3] = {
        {1,2,3},
        {4,5,6},
        {7,8,9}
};

void init()
{

}

bool priCmp(char l, char r) { // r 이 더 크다
    if (r == '+' || r == '-') {
        if (l == '*') {
            return false;
        }
    }
    return true;
}

int calculate(char* exp, int points[]) {
    snum.clear();
    sfig.clear();

    for (int i = 0; exp[i]; i++) {
        if ('0' <= exp[i] <= '5' || 'A' <= exp[i] <= 'C') {
            snum.push_back(exp[i]);
        }
        else {
            if(priCmp(sfig.back(), exp[i])) sfig.push_back(exp[i]);
            else {

            }
        }
    }

    return 0;
}

int calculate(int mid, int points[]) {
    return 0;
}

pii getn_type(char exp[]) {
    int n = 0, type = 0;
    int tmp[3] = { 0,0,0 };

    for (int i = 0; exp[i]; i++) {
        if (exp[i] == 'A') {
            tmp[0] = 1;
        }
        else if (exp[i] == 'B') {
            tmp[1] = 1;
        }
        else if (exp[i] == 'C') {
            tmp[2] = 1;
        }
    }

    if (tmp[0]) {
        int points[3] = { 1,0,0 };
        int points_rev[3] = { -1,0,0 };
        if (calculate(exp, points) == calculate(exp, points_rev)) {
            n++;
            type += 100;
        }
    }

    if (tmp[1]) {
        int points_B[3] = { 0,1,0 };
        int points_rev_B[3] = { 0,-1,0 };
        if (calculate(exp, points_B) == calculate(exp, points_rev_B)) {
            n++;
            type += 10;
        }
    }

    if (tmp[2]) {
        int points_C[3] = { 0,0,1 };
        int points_rev_C[3] = { 0,0,-1 };
        if (calculate(exp, points_C) == calculate(exp, points_rev_C)) {
            n++;
            type += 1;
        }
    }

    return make_pair(n, type);
}


int addExpression(int mID, char mExpression[MAX_LEN + 1])
{
    auto ret = getn_type(mExpression);
    int n = ret.first; int type = ret.second;

    vector<int>& dat = db[n][type];

    bool isdiff = false;
    int cnt = 0;

    midmap[mID] = mExpression;

    for (int i = 0; i < dat.size(); i++) {
        for (int j = 0; j < 3; j++) {
            if (calculate(mID, points[j]) != calculate(dat[i], points[j])) {
                cnt++;
                isdiff = true;
                break;
            }
        }
    }
    
    dat.push_back(mID);

    if (isdiff) {
        return -n;
    }
    else {
        return cnt;
    }
}

int calcExpression(int mID, int mA, int mB, int mC)
{
    snum.clear();
    sfig.clear();

    //vector<char> exp = midmap[mID];

    return 0;
}
