#include <string>
#include <unordered_map>
#include <cstring>

using namespace std;

#define MAX_BCNT	100
#define MAX_NAME	10
#define MAX_BAC		15100

#define rint register int

////////////////////////////////////////////////////////////////////////////////

struct Type
{
	string name;
	int ht;
	int cnt;

	void init() {
		name.clear();
		ht = 0; cnt = 0;
	}
};

class DB {
public:
	int dcnt = 0;
	Type tab[MAX_BCNT];
	unordered_map<string, int> tmap; // name -> type

	void init() {
		dcnt = 0;
		for (rint i = 0; i < MAX_BCNT; i++) tab[i].init();
		tmap.clear();
	}

	void add(string n, int _ht) {
		tab[dcnt].name = n;
		tab[dcnt].ht = _ht;
		tab[dcnt].cnt = 0;
		tmap.insert(make_pair(n, dcnt));

		dcnt++;
	}

	int gettype(string n) {
		if (tmap.find(n) != tmap.end()) {
			return tmap[n];
		}
		//printf("error1");
		return -1;
	}

	int getHT(int t) {
		return tab[t].ht;
	}

	int getcnt(string n) {
		return tab[tmap[n]].cnt;
	}

	void increase(int i, int cnt) {
		tab[i].cnt += cnt;
	}

	void decrease(int i, int cnt) {
		/*if (tab[i].cnt < cnt) {
			printf("error3");
		}*/
		tab[i].cnt -= cnt;
	}
};

DB db;

////////////////////////////////////////////////////////////////////////////////

struct Dat
{
	int id;
	int type;
	int cl;
	int st;
	int ut;

	int l;


	int et;
	int cnt;

	void init() {
		type = -1;
	}
};

class Repos {
public:
	int rcnt = 0;
	Dat tab[MAX_BAC];

	void init() {
		rcnt = 0;
		for (rint i = 0; i < MAX_BAC; i++) tab[i].init();
	}

	bool isalive(int id) {
		return tab[id].type != -1;
	}

	int add(int t, int _l, int _st, int _et, int _cnt) {
		tab[rcnt].id = rcnt;
		tab[rcnt].type = t; tab[rcnt].l = _l; tab[rcnt].st = _st; tab[rcnt].et = _et; tab[rcnt].cnt = _cnt;
		tab[rcnt].cl = _l;
		tab[rcnt].ut = _st;
		rcnt++;
		return rcnt - 1;
	}

	void remove(int id) {
		tab[id].init();
	}

	int getlife(int id) {
		/*if (!isalive(id)) {
			printf("error5");
		}*/
		return tab[id].cl;
	}
};

Repos rep;

////////////////////////////////////////////////////////////////////////////////

struct PQ
{
	int sz = 0;
	int tab[MAX_BAC];
	int idx[MAX_BAC]; // id -> idx

	void init() {
		sz = 0;
	}

	void _swap(int a, int b) {
		auto tmp = tab[a];
		tab[a] = tab[b];
		tab[b] = tmp;

		idx[tab[b]] = b;
		idx[tab[a]] = a;
	}

	bool cmp(int i1, int i2) {
		int id1 = tab[i1];
		int id2 = tab[i2];

		if (rep.tab[id1].cl == rep.tab[id2].cl) {
			return rep.tab[id1].st > rep.tab[id2].st;
		}
		else return rep.tab[id1].cl > rep.tab[id2].cl;
	}

	void hup(int ci) {
		int pi = (ci - 1) / 2;

		while (ci >= 1 && cmp(pi, ci)) {
			_swap(ci, pi);
			ci = pi;
			pi = (ci - 1) / 2;
		}
	}

	void hdwn(int pi) {
		int ci = pi * 2 + 1;
		bool pl = false;

		while (ci < sz && !pl) {
			if (ci != sz - 1 && cmp(ci, ci + 1)) ci += 1;

			if (cmp(ci, pi)) pl = true;
			else {
				_swap(ci, pi);
				pi = ci;
				ci = pi * 2 + 1;
			}
		}
	}

	void push(int id) {
		tab[sz] = id;
		idx[id] = sz;
		sz++;

		hup(sz - 1);
	}

	int top() {
		return tab[0];
	}

	int pop() {
		int rtid = tab[0];

		_swap(0, sz - 1);
		sz--;
		hdwn(0);

		return rtid;
	}

	void update(int id) {
		int i = idx[id];
		hup(i);
		hdwn(i);
	}

	void remove(int id) {
		int ti = idx[id];
		if (ti >= sz) {
			return;
		}
		_swap(ti, sz - 1);
		sz--;
		hup(ti);
		hdwn(ti);
	}
};

PQ t;

////////////////////////////////////////////////////////////////////////////////

int endtime(int st, int type, int l) {
	int ht = db.getHT(type);
	int cnt = 0;

	while (l > 9) {
		l /= 2;
		cnt++;
	}

	return st + ht * cnt;
}

struct utcl
{
	int ut; int cl;
	utcl(int a, int b) {
		ut = a; cl = b;
	}
};

utcl getcurl(int id, int ct) {
	auto dat = &rep.tab[id];
	int ht = db.getHT(dat->type);
	int t = dat->ut;
	int l = dat->cl;

	t += ht;

	while (t <= ct) {
		l /= 2;
		t += ht;
	}

	return utcl(min(t-ht,ct),l);
}

void kill(int id) {
	if (!rep.isalive(id)) {
		return;
	}

	Dat* dat = &rep.tab[id];
	db.decrease(dat->type, dat->cnt);
	rep.remove(id);
	t.remove(id);
}

void updatetime(int ct) {

	int tt[MAX_BAC];
	int tsz = t.sz;
	memcpy(tt, t.tab, tsz * sizeof(int));

	for (rint i = 0; i < tsz; i++) {
		int id = tt[i];

		Dat* dat = &rep.tab[id];

		utcl _utcl = getcurl(id, ct);

		if (_utcl.cl <= 9) {
			kill(id);
		}
		else {
			dat->cl = _utcl.cl;
			dat->ut = _utcl.ut;
			t.update(id);
		}
	}
}

void cleandead(int ct) {

	int tt[MAX_BAC];
	int tsz = t.sz;
	memcpy(tt, t.tab, tsz * sizeof(int));

	for (rint i = 0; i < tsz; i++) {
		int id = tt[i];

		Dat* dat = &rep.tab[id];

		if (dat->et <= ct) {
			kill(id);
		}
	}
}

////////////////////////////////////////////////////////////////////////////////

void init(int N, char bNameList[MAX_BCNT][MAX_NAME], int mHalfTime[MAX_BCNT])
{
	//  처음 보관소는 비어있고, 현재 시각은 0 이다.

	//	보관소에는 N 개 종류의 미생물을 보관할 수 있다.
	db.init();
	rep.init();
	t.init();

	//	미생물의 이름은 bNameList[] 이고, 미생물의 생명력이 절반으로 줄어드는 시간은 각각 mHalfTime[] 이다.
	//	미생물의 이름은 bNameList[0], bNameList[1], …, bNameList[N – 1] 이고, 모두 서로 다른 이름이다.
	//	미생물의 생명력이 절반이 되는 시간은 mHalfTime[0], mHalfTime[1], …, mHalfTime[N – 1] 이다.
	//	bNameList[] 은 길이가 3 이상 9 이하의 영문 소문자이고, ‘＼0’ 문자로 끝나는 문자열이다.

	for (rint i = 0; i < N; i++) {
		db.add(bNameList[i], mHalfTime[i]);
	}

	//	Parameters
	//	N : 보관소에 보관하는 미생물의 종류(1 ≤ N ≤ 100)
	//	bNameList[] : 미생물의 이름(3 ≤ bNameList[]의 길이 ≤ 9)
	//	mHalfTime[] : 미생물의 생명력이 절반이 되는 시간(10 ≤ mHalfTime[] ≤ 10, 000)

	return;
}

void addBacteria(int tStamp, char bName[MAX_NAME], int mLife, int mCnt)
{
	//  tStamp 시각에 mLife 생명력의 bName 미생물을 mCnt 개 보관한다.

	//	bName 미생물의 생명력은 tStamp 시각에 mLife 이고, 이후 mHalfTime 시간마다 현재 생명력이 절반으로 감소한다.

	//	예를 들어, 171 생명력 미생물의 mHalfTime 값이 10 이면,
	//	tStamp 시각부터 10 시간마다 생명력은 171 → 85 → 42 → 21 → 10 → 5 되고, 생명력이 5 되면 미생물은 폐기된다.

	int type = db.gettype(bName);
	int id = rep.add(type, mLife, tStamp, endtime(tStamp, type, mLife), mCnt);
	t.push(id);
	db.increase(type, mCnt);

	//	Parameters
	//	tStamp : 미생물을 보관소에 보관하는 시각(1 ≤ tStamp ≤ 1, 000, 000)
	//	bName[] : 미생물의 이름(3 ≤ bName의 길이 ≤ 9)
	//	mLife : 미생물의 생명력(100 ≤ mLife ≤ 50, 000)
	//	mCnt : 미생물의 개수(1 ≤ mCnt ≤ 1, 000)

	return;
}

int takeOut(int tStamp, int mCnt)
{
	//	Parameters
	//	tStamp : 미생물의 반출 시각(1 ≤ tStamp ≤ 1, 000, 000)
	//	mCnt : 미생물의 반출 개수(1 ≤ mCnt ≤ 100)

	//	tStamp 시각에 생명력이 9 이하의 미생물은 폐기 처분되어 포함되지 않는다.

	updatetime(tStamp);

	//	생명력 -> 보관 시각이 먼저

	//  tStamp 시각에 보관소에서 생명력이 가장 작은 순서로 미생물 mCnt 개 반출하고, 반출한 미생물의 생명력 합을 반환한다.
	//	함수 호출 시, 보관소에 미생물이 1개 이상 있음이 보장된다.

	int sum = 0;

	//	만약 미생물의 보관 개수가 mCnt 개 미만인 경우 보관중인 미생물을 모두 반출한다.
	//////////////////// 미만인경우 한꺼번에 처리 따로 추가 코딩!!

	while (mCnt > 0) {
		int id = t.top();
		/*if (!rep.isalive(id)) {
			printf("error6");
		}*/

		Dat* dat = &rep.tab[id];

		if (dat->cnt <= mCnt) {
			mCnt -= dat->cnt;
			t.pop();
			sum += dat->cl * dat->cnt;
			kill(id);
			continue;
		}
		else {
			dat->cnt -= mCnt;
			sum += dat->cl * mCnt;
			db.decrease(dat->type, mCnt);
			//t.push(id);
			break;
		}
	}

	//	Returns
	//	반출하는 미생물의 생명력 합

	return sum;
}

int checkBacteria(int tStamp, char bName[MAX_NAME])
{
	//	Parameters
	//	tStamp : 보관소에 있는 bName 미생물의 개수를 확인하는 시각(1 ≤ tStamp ≤ 1, 000, 000
	//		bName[]   : 미생물의 이름(3 ≤ bName의 길이 ≤ 9)

	//	tStamp 시각에 생명력이 9 이하의 미생물은 폐기 처분되어 포함되지 않는다.
	//updatetime(tStamp);
	cleandead(tStamp);

	//  tStamp 시각에 보관소에 있는 bName 미생물의 개수를 반환한다.
	return db.getcnt(bName);
}
