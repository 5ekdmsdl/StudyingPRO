#include <vector>
#include <string>
#include <list>
#include <queue>
#define rint register int
#define ull unsigned long long
#define MAX 1024
#define pii pair<int, int>

using namespace std;

ull encode(const char str[]) {
	ull ret = 0;
	for (rint i = 0; i < 10; i++) {
		char c = str[i];
		if (c == '\0') break;
		ret = ret * 27 + (c - 'a' + 1);
	}
	return ret;
}

int decode(ull id, char rtl[]) {

	int i = 0;
	int cnt = 0;
	ull iid = id;

	while (iid > 0) {
		iid /= 27;
		cnt++;
	}

	while (id > 0) {
		char c = 'a' + (id % 27 - 1);
		id /= 27;

		rtl[cnt - i - 1] = c;
		i++;
	}

	rtl[i] = '\0';

	return cnt;
}

///////////////////////////////////////////////////////

struct CONT
{
	ull name;
	ull cont;
	int created;
	int edited;

	CONT() : name(0), cont(0), created(-1), edited(-1) {};

	CONT(int t, ull n, ull d, const char cn[]) {
		name = n;
		cont = d;

		created = t;
		edited = t;
	}
};

///////////////////////////////////////////////////////

struct cmp
{
	bool operator()(CONT a, CONT b) {
		return a.created > b.created;
	}
};

struct ND
{
	int bidx; // 행렬 idx
	ull bid; // nd id

	ull par;

	vector<ull> sons;
	vector<CONT> conts;

	ND(int _bidx, ull _bid, ull _par, string bn) {
		bidx = _bidx;
		bid = _bid;
		par = _par;
	}

	void addcont(int mTime, const char file[], const char data[]) {
		ull f = encode(file);
		ull d = encode(data);

		if (conts.size() == 50) contpop();
		conts.push_back(CONT(mTime, f, d, file));

		return;
	}

	void copycontwithouterase(int time, CONT cont) {
		conts.push_back(cont);
	}

	void copycont(int time, CONT cont) {
		if (conts.size() == 50) contpop();
		conts.push_back(cont);
	}

	void contpop() {
		vector<CONT>::iterator min_itr = conts.begin();
		for (auto itr = conts.begin(); itr != conts.end(); itr++) {
			if (min_itr->created > itr->created) min_itr = itr;
		}
		conts.erase(min_itr);
	}
};

list<ND> ndarr[MAX];

///////////////////////////////////////////////////////

int getid(const char str[]) {
	return encode(str) % 1024;
}

ND* getnd(const char str[]) {
	ull bid = encode(str);

	for (auto nd = ndarr[getid(str)].begin(); nd != ndarr[getid(str)].end(); nd++)
	{
		if (nd->bid == bid) {
			return &(*nd);
		}
	}

	int a = 0;
}

ND* getnd(ull bid) {

	for (auto nd = ndarr[bid % MAX].begin(); nd != ndarr[bid % MAX].end(); nd++)
	{
		if (nd->bid == bid) {
			return &(*nd);
		}
	}

	int a = 0;
}

void newnode(const char str[], ull par) {

	ndarr[getid(str)].push_back(ND(getid(str), encode(str), par, str));

	if (par != -1) {
		ND* pnd = getnd(par);
		pnd->sons.push_back(encode(str));
	}

	return ;
}

void deletenodewithPar(ND* cnd, ND* pnd) {

	for (auto son = pnd->sons.begin(); son != pnd->sons.end(); son++)
	{
		if (*son == cnd->bid) {
			pnd->sons.erase(son);
			return;
		}
	}

	int a = 0;
}

///////////////////////////////////////////////////////

void init() {
	for (rint i = 0; i < MAX; i++) ndarr[i].clear();

	newnode("root", -1);
	return;
}

void create(int mTime, char mBranch[], char mFile[], char mData[]) {
	ND* nd = getnd(mBranch);

	nd->addcont(mTime, mFile, mData);

	return;
}

void edit(int mTime, char mBranch[], char mFile[], char mData[]) {
	
	ND* nd = getnd(mBranch);

	ull e_file = encode(mFile);
	ull e_data = encode(mData);

	for (int i = 0; i < nd->conts.size(); i++) {
		CONT* cont = &nd->conts[i];

		if (cont->name == e_file) {
			cont->cont = e_data;
			cont->edited = mTime;
			return;
		}
	}
	
	int a = 0;

	return;
}

void branch(int mTime, char mBranch[], char mChild[]) {

	ND* pnd = getnd(mBranch);

	newnode(mChild, pnd->bid);
	ND* cnd = getnd(mChild);

	for (int i = 0; i < pnd->conts.size(); i++) {
		cnd->copycontwithouterase(mTime, pnd->conts[i]);
	}

	return;
}

void merge2(int mTime, ull branch) {

	ND* cnd = getnd(branch);
	ND* pnd = getnd(cnd->par);
	bool found = false;

	for (auto son = cnd->sons.begin(); son != cnd->sons.end(); son++) {
		merge2(mTime, *son);
	}

	for (int i = 0; i < cnd->conts.size(); i++) {
		CONT* cont = &cnd->conts[i];
		found = false;

		for (int i = 0; i < pnd->conts.size(); i++) {
			CONT* pcont = &pnd->conts[i];

			if (cont->name == pcont->name) {
				found = true;

				if (cont->created == pcont->created && cont->edited > pcont->edited) {
					pcont->cont = cont->cont;
					pcont->edited = cont->edited;
					pcont->name = cont->name;
				}

				break;
			}
		}

		if (!found) pnd->copycontwithouterase(mTime, *cont);
	}

	while (pnd->conts.size() > 50) {
		pnd->contpop();
	}
}

void merge(int mTime, char mBranch[]) {

	merge2(mTime, encode(mBranch));

	ND* cnd = getnd(mBranch);
	ND* pnd = getnd(cnd->par);
	deletenodewithPar(cnd, pnd);

	return;
}

int readfile(int mTime, char mBranch[], char mFile[], char retString[]) {

	ND* nd = getnd(mBranch);
	int rtv = 0;
	ull e_file = encode(mFile);

	for (int i = 0; i < nd->conts.size(); i++) {
		CONT* cont = &nd->conts[i];
		if (cont->name == e_file) {

			rtv = decode(cont->cont, retString);
			break;
		}
	}

	if (rtv == 0) {
		int a = 0;
	}

	return rtv;
}
